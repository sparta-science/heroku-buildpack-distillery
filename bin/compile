#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)
cache_dir=$(cd $2 && pwd)
env_dir=$(cd $3 && pwd)
heroku_dir=$build_dir/.heroku

source ${build_pack_dir}/lib/misc_funcs.sh

export_env_dir $env_dir
download_aws_cli $build_dir $cache_dir $build_pack_dir
create_aws_credentials

#AWS_INSTALL_DIR=$build_dir/vendor/awscli
#chmod +x $build_dir/vendor/awscli-bundle/install
#$build_dir/vendor/awscli-bundle/install -i $AWS_INSTALL_DIR
#chmod u+x $AWS_INSTALL_DIR/bin/aws
#
#echo " ????????????????????????????????????????????????????????????????????????"
#
#aws=$AWS_INSTALL_DIR/bin/aws
#
echo "aws: ${aws}"
#echo "S3_RELEASES_ROOT: ${S3_RELEASES_ROOT}"
#S3_RELEASES_ROOT="s3://sparta-science"
#
#
#

echo "AWS_KEY: ${AWS_KEY}"
echo "AWS_REGION: ${AWS_REGION}"
echo `printenv`


$aws s3 cp "${S3_RELEASES_ROOT}/half_dome/CURRENT_APP_VERSION" /tmp/CURRENT_APP_VERSION
app_version=`cat /tmp/CURRENT_APP_VERSION`

echo "app_version: ${app_version}"
$aws s3 cp "${S3_RELEASES_ROOT}/half_dome/${app_version}/unix_linux/half_dome.tar.gz" /tmp

echo "successfully downloaded tarball"

# junk is temporarily here:
cd $build_dir
mkdir junk
cd junk

tar xf /tmp/half_dome.tar.gz
